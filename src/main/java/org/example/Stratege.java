package org.example;

public class Stratege {

    /**
     * 策略模式
     * comparable接口和comparator接口
     * 策略模式 : 定义了 算法家族 , 分别 封装起来 , 让它们之间 , 可以 相互替换 , 此模式 让 算法的变化 不会影响到 使用算法的用户 ;
     * 将 不同的算法 , 封装到 不同的类 中 , 让它们之间可以 相互替换 ,
     * 使用算法的用户 即 应用层 , 感知不到 算法已经被替换了 ;
     *
     * 策略模式适用场景 :
     * 行为切换 : 系统有 很多类 , 这些类的区别仅仅在于它们的 行为不同 ; 使用策略模式 , 可以 动态地 让 用户对象 在这些行为中, 选择一个行为 ;
     * 将对象的 不同的行为 , 封装到 不同的类 中 , 每个行为对应一种策略 ;
     * 算法选择 : 系统中需要 动态地 在 几种算法 中 选择一种 ;
     * 算法 就是 策略 , 其中封装了一系列的业务逻辑及计算方式 ;
     * 如 : 计算方式 , 给定两个数字 ; 使用加法策略 , 将两个数相加 ; 使用乘法策略 , 将两个数相乘 ;
     *
     */

    

}
